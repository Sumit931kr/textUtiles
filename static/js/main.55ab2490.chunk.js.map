{"version":3,"sources":["Component/About.js","Component/Alert.js","Component/Navbar.js","Component/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","className","style","backgroundColor","mode","color","borderRadius","border","id","type","Alert","height","width","alert","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","to","title","AboutText","togglemode","onClick","htmlFor","textcolor","moode","TextForm","useState","text","setText","value","onChange","event","console","log","target","rows","disabled","length","newtext","showalert","navigator","clipboard","writeText","split","join","filter","element","defaultProps","App","setalert","setmode","setmoode","settextcolor","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.55ab2490.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n \r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{backgroundColor: props.mode === 'dark'?'rgb(71 45 223)':'white',color: props.mode === 'dark'?'white':'black', borderRadius : '10px', border : '2px solid white'}}  >\r\n            <h3 className=\"my-3\">About Us</h3>\r\n            <div className=\"accordion\" id=\"accordionExample\" >\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header \" id=\"headingOne\">\r\n                        <button className=\"container accordion-button collapsed\" style={{backgroundColor: props.mode === 'dark'?'rgb(37 21 131)':'white',color: props.mode === 'dark'?'white':'black',borderRadius : '10px'}}   type=\"button\"  data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show \"  aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <d className=\"accordion-body\" style={{backgroundColor: props.mode === 'dark'?'rgb(71 45 223)':'white',color: props.mode === 'dark'?'white':'black',borderRadius : '10px'}}>\r\n                            <strong>This is the first item's accordion body.</strong>custom CSS or overriding our It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can  default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </d>\r\n                    </div> \r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"container accordion-button collapsed\" style={{backgroundColor: props.mode === 'dark'?'rgb(37 21 131)':'white',color: props.mode === 'dark'?'white':'black',borderRadius : '10px'}} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\"style={{backgroundColor: props.mode === 'dark'?'rgb(71 45 223)':'white',color: props.mode === 'dark'?'white':'black',borderRadius : '10px'}} >\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div> \r\n                </div>\r\n                <div className=\"accordion-item\" >\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"container accordion-button collapsed\" style={{backgroundColor: props.mode === 'dark'?'rgb(37 21 131)':'white',color: props.mode === 'dark'?'white':'black',borderRadius : '10px'}} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={{backgroundColor: props.mode === 'dark'?'rgb(71 45 223)':'white',color: props.mode === 'dark'?'white':'black',borderRadius : '10px'}}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n         \r\n        </div>\r\n            </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div style={{height: '9vh',width: '100%'}}>\r\n       { props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong> {capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n\r\n            </div>\r\n        </div>\r\n}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import { getByTitle } from '@testing-library/dom'\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.AboutText}</Link>\r\n            </li>\r\n          </ul> \r\n          \r\n\r\n            <div className={`form-check form-switch my-3 text-${props.togglemode}`}>\r\n            <input className=\"form-check-input \" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"\r\n              style={props.textcolor}> Enable {props.moode} mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  AboutText: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  AboutText: 'About',\r\n}\r\n\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n\r\n    const handleupclick = () => {\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n        props.showalert(\"Converted into UpperCase\", \"success\")\r\n    }\r\n\r\n    const handlelowclick = () => {\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext);\r\n        props.showalert(\"Converted into LowerCase\", \"success\")\r\n    }\r\n\r\n    const handleclearclick = () => {\r\n        let newtext = '';\r\n        setText(newtext);\r\n        props.showalert(\"Text is Cleared\", \"success\")\r\n    }\r\n\r\n    const handlecopyclick = () => {\r\n    navigator.clipboard.writeText(text)\r\n    props.showalert(\"Text Copied on CLipboard\", 'success');\r\n\r\n    }\r\n\r\n    const handleExtraspaceclick = () => {\r\n        let newtext = text.split(/[ ]+/);\r\n        setText(newtext.join(\" \"));\r\n        props.showalert(\"Extra Spaces is removed\", \"success\")\r\n    }\r\n\r\n\r\n\r\n    const handleonchange = (event) => {\r\n        console.log(\"handle on Change was clicked\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n    const [text, setText] = useState('');\r\n    //  text = \"new Line \" ;  // Wrong way to Chenge the State\r\n    // setText(\"New Line\") // Correct way to change the State\r\n\r\n\r\n    return (\r\n        <>\r\n        <div className=\"conatiner\" >\r\n            <h3 style={{color: props.mode === 'dark'?'white':'black'}}>Enter the Text to Analyze</h3>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleonchange} style={{backgroundColor: props.mode === 'dark'?'rgb(105 87 255)':'white',color: props.mode === 'dark'?'white':'black'}} id=\"mybox\" rows=\"7\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleupclick}>Convert to UpperCase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-success  mx-2 my-2\" onClick={handlelowclick}>Convert to LowerCase</button>\r\n            <button  disabled={text.length===0} className=\"btn btn-warning mx-2 my-2\" onClick={handlecopyclick}>Copy the Text</button>\r\n            <button  disabled={text.length===0} className=\"btn btn-info mx-2 my-2\" onClick={handleExtraspaceclick}>Remove the extra space</button>\r\n            <button  disabled={text.length===0} className=\"btn btn-danger mx-2 my-2\" onClick={handleclearclick}>Clear the Text</button>\r\n\r\n            <div className=\"container\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n                <h3>Your Text Summary</h3>\r\n                <p> {text.split(/\\s+/).filter((element)=>{return element.length!==0}).length } words {text.length} Character</p>\r\n                <p> {0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minute read</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length>0?text:\"Nothing to Preview Here\"}</p>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport { useState } from 'react';\nimport './App.css';\nimport About from './Component/About';\nimport Alert from './Component/Alert';\nimport Navbar from './Component/Navbar';\nimport TextForm from './Component/TextForm';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  // Link\n} from \"react-router-dom\";\n\n\n\nfunction App() {\nconst [alert, setalert] = useState(null)\n  const [mode, setmode] = useState('light') // Wheather dark mode is enabled or not\n  const [moode, setmoode] = useState('dark') \n  const [textcolor, settextcolor] = useState(\n    {\n      color : 'black'\n    }\n  )\n  const togglemode = () => {\n    \n    if (mode === 'light') {\n      setmode('dark')\n      settextcolor({  color: 'white' })\n      showalert(\"Dark Mode has been Enabled\",\"success\")\n      setmoode('light')\n      document.body.style.backgroundColor = '#412e64';\n  \n    }\n    else {\n      setmode('light')\n      settextcolor({color: 'black' })\n      showalert(\"Light Mode has been Enabled\",\"success\")\n      setmoode('dark')\n      document.body.style.backgroundColor = 'white';\n  \n    }\n  }\n\nconst showalert = (message, type)=> {\n  setalert({\nmsg : message,\ntype : type,\n  }\n )\n setTimeout(() => {\n   setalert(null)\n }, 1500);\n}\n\n\n\n  return (\n    <>\n        <Router>\n      <Navbar title=\"TextUtiles\" moode={moode} mode={mode} togglemode={togglemode} textcolor={textcolor} />\n    <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode}/>\n          </Route>\n        \n          <Route exact path=\"/\">\n          <TextForm mode={mode} showalert={showalert}/>\n         \n          </Route>\n        </Switch>\n       \n        {/* <About mode={mode}/> */}\n      </div>\n      </Router>\n\n    </>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}